Message = exports.Message
CommandCenterModel = exports.CommandCenterModel
CommandCenter = exports.CommandCenter

modes = ['observer', 'turtles', 'patches', 'links']
firstMessage = new Message('You', 'observer', 'first message')
secondMessage = new Message('You', 'observer', 'second message')
thirdMessage = new Message('You', 'links', 'third message')

module('CommandCenter')
test('UI', ->
  $fixture = $('#qunit-fixture')
  cc = new CommandCenter('You', modes)
  $fixture.append(cc.ui.prompt)
  $fixture.append(cc.ui.textInput)
  $prompt = $(cc.ui.prompt)
  $input = $(cc.ui.textInput)
  $input.val(firstMessage.text)
  equal($prompt.text(), modes[0], 'Starts on first mode')
  deepEqual(cc.sendInput(), firstMessage, 'sendInput uses input value')
  # TODO: It would be really nice to simulate keypresses here, but it's a pain
  cc.prevInput()
  equal($input.val(), firstMessage.text, 'Going to previous input returns the last input')
  cc.prevInput()
  equal($input.val(), firstMessage.text, 'Trying to go before the first input just stays at first input')
  deepEqual(cc.sendInput(), firstMessage, 'Scrolling up inputs actually sets the message to be sent')
  equal($input.val(), '', 'Sending input clears the input')
)

test('Model', ->
  cc = new CommandCenterModel('You', modes)
  cc.edit(firstMessage.text)
  equal(modes[0], cc.mode(), 'Starts on first mode.')
  deepEqual(cc.send(), firstMessage, '`send()` returns current message.')
  deepEqual(cc.prevInput(), firstMessage, 'Going to previous input returns the last input')
  deepEqual(cc.prevInput(), firstMessage, 'Trying to go before the first input just stays at first input')
  deepEqual(cc.send(), firstMessage, 'Scrolling up inputs actually sets the message to be sent')
  cc.edit(secondMessage.text)
  cc.prevInput()
  deepEqual(cc.nextInput(), secondMessage, 'Current message is preserved when scrolling through inputs')
  deepEqual(cc.send(), secondMessage, '... and sends okay')
  cc.edit(thirdMessage.text)
  cc.nextMode()
  deepEqual(cc.mode(), modes[1], 'Scrolling through modes...')
  cc.nextMode()
  deepEqual(modes[2], cc.mode())
  cc.nextMode()
  deepEqual(modes[3], cc.mode())
  cc.nextMode()
  deepEqual(modes[0], cc.mode())
  cc.prevMode()
  deepEqual(modes[3], cc.mode(), '... works modularly')
  cc.edit(thirdMessage.text)
  deepEqual(cc.prevInput(), secondMessage, 'Can scroll up once ...')
  deepEqual(cc.prevInput(), firstMessage, '... twice')
  deepEqual(cc.nextInput(), secondMessage, '... and back down works')
  deepEqual(cc.nextInput(), thirdMessage, 'Mode of current message is preserved')
  deepEqual(cc.send(), thirdMessage, 'Send works correctly when mode is changed')
  deepEqual(cc.mode(), modes[3], 'Send preserved current mode')
  deepEqual(cc.prevInput(), thirdMessage, 'Mode changes correspondingly when scrolling through inputs')
  cc.send()
  deepEqual(cc.prevInput(), thirdMessage, 'Entering multiple identical messages ...')
  deepEqual(cc.prevInput(), secondMessage, '... only adds a single message onto the history')
)
