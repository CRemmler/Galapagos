Message = exports.Message
CommandCenterModel = exports.CommandCenterModel

module('CommandCenter')
test('Model', ->
  firstMessage = new Message('You', 'observer', 'first message')
  secondMessage = new Message('You', 'observer', 'second message')
  thirdMessage = new Message('You', 'links', 'third message')
  modes = ['observer', 'turtles', 'patches', 'links']
  cc = new CommandCenterModel('You', modes)
  cc.edit(firstMessage.text)
  equal(modes[0], cc.mode(), 'Starts on first mode.')
  deepEqual(firstMessage, cc.send(), '`send()` returns current message.')
  deepEqual(firstMessage, cc.prevInput(), 'Going to previous input returns the last input')
  deepEqual(firstMessage, cc.prevInput(), 'Trying to go before the first input just stays at first input')
  deepEqual(firstMessage, cc.send(), 'Scrolling up inputs actually sets the message to be sent')
  cc.edit(secondMessage.text)
  cc.prevInput()
  deepEqual(secondMessage, cc.nextInput(), 'Current message is preserved when scrolling through inputs')
  deepEqual(secondMessage, cc.send(), '... and sends okay')
  cc.edit(thirdMessage.text)
  cc.nextMode()
  deepEqual(modes[1], cc.mode(), 'Scrolling through modes...')
  cc.nextMode()
  deepEqual(modes[2], cc.mode())
  cc.nextMode()
  deepEqual(modes[3], cc.mode())
  cc.nextMode()
  deepEqual(modes[0], cc.mode())
  cc.prevMode()
  deepEqual(modes[3], cc.mode(), '... works modularly')
  cc.edit(thirdMessage.text)
  deepEqual(secondMessage, cc.prevInput(), 'Can scroll up once ...')
  deepEqual(firstMessage, cc.prevInput(), '... twice')
  deepEqual(secondMessage, cc.nextInput(), '... and back down works')
  deepEqual(thirdMessage, cc.nextInput(), 'Mode of current message is preserved')
  deepEqual(thirdMessage, cc.send(), 'Send works correctly when mode is changed')
  deepEqual(modes[3], cc.mode(), 'Send preserved current mode')
  deepEqual(thirdMessage, cc.prevInput(), 'Mode changes correspondingly when scrolling through inputs')
  cc.send()
  deepEqual(thirdMessage, cc.prevInput(), 'Entering multiple identical messages ...')
  deepEqual(secondMessage, cc.prevInput(), '... only adds a single message onto the history')
)
